/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { DevRev } from "@fern-api/devrev";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace AuthConnection {
    interface Options {
        environment: string;
        authorization?: core.Supplier<string>;
    }
}

export class AuthConnection {
    constructor(private readonly options: AuthConnection.Options) {}

    /**
     * Creates a new enterprise authentication connection for a Dev
     * organization. This authentication connection will not be enabled by
     * default for the organization and the user will need to explicitly
     * enable this. Keep in mind that at a time, only one authentication
     * connection can be enabled for a Dev organization. At present, only 5
     * enterprise connections can be created by an organization.
     *
     */
    public async create(request: DevRev.DevOrgAuthConnectionsCreateRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.create"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.DevOrgAuthConnectionsCreateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes an authentication connection. Only enterprise connections which
     * are explicitly set up for a Dev organization can be deleted. Default
     * connections can not be deleted using this method.
     *
     */
    public async delete(request: DevRev.DevOrgAuthConnectionsDeleteRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.delete"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.DevOrgAuthConnectionsDeleteRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieves the details for an authentication connection.
     */
    public async get(request: DevRev.RetrieveDevOrgRequest): Promise<DevRev.DevOrgAuthConnectionsGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.get"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.DevOrgAuthConnectionsGetResponse.parseOrThrow(
                _response.body as serializers.DevOrgAuthConnectionsGetResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists all the authentication connections available for a Dev
     * organization. This list will include both social and enterprise
     * connections which are either available by default or are explicitly
     * created by the user.
     *
     */
    public async list(): Promise<DevRev.DevOrgAuthConnectionsListResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.list"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
        });
        if (_response.ok) {
            return await serializers.DevOrgAuthConnectionsListResponse.parseOrThrow(
                _response.body as serializers.DevOrgAuthConnectionsListResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Enable or disable an authentication connection for a Dev organization.
     * Currently, only 1 authentication connection can be enabled at a time.
     * When a new authentication connection is enabled, the connection which
     * is currently enabled for the Dev organization is automatically
     * disabled.
     *
     */
    public async toggle(request: DevRev.DevOrgAuthConnectionsToggleRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.toggle"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.DevOrgAuthConnectionsToggleRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates an authentication connection.
     */
    public async update(request: DevRev.DevOrgAuthConnectionsUpdateRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-orgs.auth-connections.update"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.DevOrgAuthConnectionsUpdateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
