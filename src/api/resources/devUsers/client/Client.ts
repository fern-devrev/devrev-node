/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { DevRev } from "@fern-api/devrev";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace DevUsers {
    interface Options {
        environment: string;
        authorization?: core.Supplier<string>;
    }
}

export class DevUsers {
    constructor(private readonly options: DevUsers.Options) {}

    /**
     * Lists users within your organization.
     */
    public async list(request: DevRev.DevUsersListRequest = {}): Promise<DevRev.DevUsersListResponse> {
        const { cursor, limit, mode } = request;
        const _queryParams = new URLSearchParams();
        if (cursor != null) {
            _queryParams.append("cursor", cursor);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-users.list"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.DevUsersListResponse.parseOrThrow(
                _response.body as serializers.DevUsersListResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the authenticated user's information.
     */
    public async self(): Promise<DevRev.DevUsersSelfResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "dev-users.self"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
        });
        if (_response.ok) {
            return await serializers.DevUsersSelfResponse.parseOrThrow(
                _response.body as serializers.DevUsersSelfResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
