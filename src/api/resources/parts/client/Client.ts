/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { DevRev } from "@fern-api/devrev";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Parts {
    interface Options {
        environment: string;
        authorization?: core.Supplier<string>;
    }
}

export class Parts {
    constructor(private readonly options: Parts.Options) {}

    /**
     * Creates new [part](https://devrev.ai/docs/product/parts).
     */
    public async create(request: DevRev.PartsCreateRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "parts.create"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.PartsCreateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a [part](https://devrev.ai/docs/product/parts).
     */
    public async delete(request: DevRev.PartsDeleteRequest): Promise<DevRev.PartsDeleteResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "parts.delete"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.PartsDeleteRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.PartsDeleteResponse.parseOrThrow(
                _response.body as serializers.PartsDeleteResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a [part's](https://devrev.ai/docs/product/parts) information.
     *
     */
    public async get(request: DevRev.PartsGetRequest): Promise<DevRev.PartsGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "parts.get"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PartsGetResponse.parseOrThrow(_response.body as serializers.PartsGetResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists a collection of [parts](https://devrev.ai/docs/product/parts).
     *
     */
    public async list(request: DevRev.PartsListRequest = {}): Promise<DevRev.PartsListResponse> {
        const { cursor, limit, mode } = request;
        const _queryParams = new URLSearchParams();
        if (cursor != null) {
            _queryParams.append("cursor", cursor);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "parts.list"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PartsListResponse.parseOrThrow(
                _response.body as serializers.PartsListResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates a [part's](https://devrev.ai/docs/product/parts) information.
     *
     */
    public async update(request: DevRev.PartsUpdateRequest): Promise<DevRev.PartsUpdateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "parts.update"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.PartsUpdateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.PartsUpdateResponse.parseOrThrow(
                _response.body as serializers.PartsUpdateResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
