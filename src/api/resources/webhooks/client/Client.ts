/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { DevRev } from "@fern-api/devrev";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Webhooks {
    interface Options {
        environment?: environments.DevRevEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

/**
 * Webhook event APIs.
 */
export class Webhooks {
    constructor(private readonly options: Webhooks.Options) {}

    /**
     * Creates a new webhook target.
     * @throws {DevRev.BadRequest}
     * @throws {DevRev.Unauthorized}
     * @throws {DevRev.Forbidden}
     * @throws {DevRev.NotFound}
     * @throws {DevRev.TooManyRequests}
     * @throws {DevRev.InternalServerError}
     * @throws {DevRev.ServiceUnavailable}
     */
    public async create(request: DevRev.WebhooksCreateRequest): Promise<DevRev.WebhooksCreateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevEnvironment.Production, "webhooks.create"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.WebhooksCreateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.WebhooksCreateResponse.parseOrThrow(
                _response.body as serializers.WebhooksCreateResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequest(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 401:
                    throw new DevRev.Unauthorized(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 403:
                    throw new DevRev.Forbidden(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 404:
                    throw new DevRev.NotFound(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequests(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailable(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes the requested webhook.
     * @throws {DevRev.BadRequest}
     * @throws {DevRev.Unauthorized}
     * @throws {DevRev.Forbidden}
     * @throws {DevRev.NotFound}
     * @throws {DevRev.TooManyRequests}
     * @throws {DevRev.InternalServerError}
     * @throws {DevRev.ServiceUnavailable}
     */
    public async delete(request: DevRev.WebhooksDeleteRequest): Promise<DevRev.WebhooksDeleteResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevEnvironment.Production, "webhooks.delete"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.WebhooksDeleteRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.WebhooksDeleteResponse.parseOrThrow(
                _response.body as serializers.WebhooksDeleteResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequest(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 401:
                    throw new DevRev.Unauthorized(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 403:
                    throw new DevRev.Forbidden(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 404:
                    throw new DevRev.NotFound(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequests(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailable(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the requested webhook's information.
     * @throws {DevRev.BadRequest}
     * @throws {DevRev.Unauthorized}
     * @throws {DevRev.Forbidden}
     * @throws {DevRev.NotFound}
     * @throws {DevRev.TooManyRequests}
     * @throws {DevRev.InternalServerError}
     * @throws {DevRev.ServiceUnavailable}
     */
    public async get(request: DevRev.WebhooksGetRequest): Promise<DevRev.WebhooksGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevEnvironment.Production, "webhooks.get"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.WebhooksGetResponse.parseOrThrow(
                _response.body as serializers.WebhooksGetResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequest(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 401:
                    throw new DevRev.Unauthorized(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 403:
                    throw new DevRev.Forbidden(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 404:
                    throw new DevRev.NotFound(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequests(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailable(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists the webhooks.
     * @throws {DevRev.BadRequest}
     * @throws {DevRev.Unauthorized}
     * @throws {DevRev.Forbidden}
     * @throws {DevRev.NotFound}
     * @throws {DevRev.TooManyRequests}
     * @throws {DevRev.InternalServerError}
     * @throws {DevRev.ServiceUnavailable}
     */
    public async list(): Promise<DevRev.WebhooksListResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevEnvironment.Production, "webhooks.list"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.WebhooksListResponse.parseOrThrow(
                _response.body as serializers.WebhooksListResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequest(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 401:
                    throw new DevRev.Unauthorized(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 403:
                    throw new DevRev.Forbidden(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 404:
                    throw new DevRev.NotFound(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequests(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailable(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the requested webhook.
     * @throws {DevRev.BadRequest}
     * @throws {DevRev.Unauthorized}
     * @throws {DevRev.Forbidden}
     * @throws {DevRev.NotFound}
     * @throws {DevRev.TooManyRequests}
     * @throws {DevRev.InternalServerError}
     * @throws {DevRev.ServiceUnavailable}
     */
    public async update(request: DevRev.WebhooksUpdateRequest): Promise<DevRev.WebhooksUpdateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevEnvironment.Production, "webhooks.update"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.WebhooksUpdateRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.WebhooksUpdateResponse.parseOrThrow(
                _response.body as serializers.WebhooksUpdateResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequest(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 401:
                    throw new DevRev.Unauthorized(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 403:
                    throw new DevRev.Forbidden(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 404:
                    throw new DevRev.NotFound(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequests(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailable(
                        await serializers.ErrorBase.parseOrThrow(_response.error.body as serializers.ErrorBase.Raw, {
                            allowUnknownKeys: true,
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
