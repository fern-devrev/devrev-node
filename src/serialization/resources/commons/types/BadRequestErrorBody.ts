/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../..";
import { DevRev } from "@fern-api/devrev";

const _Base = core.serialization.object({
    message: core.serialization.string().optional(),
});
export const BadRequestErrorBody: core.serialization.Schema<
    serializers.BadRequestErrorBody.Raw,
    DevRev.BadRequestErrorBody
> = core.serialization
    .union("type", {
        bad_request: core.serialization.object({}).extend(_Base),
        missing_required_field: core.serialization
            .lazyObject(async () => (await import("../../..")).MissingRequiredFieldBody)
            .extend(_Base),
        parse_error: core.serialization.lazyObject(async () => (await import("../../..")).ParseErrorBody).extend(_Base),
    })
    .transform<DevRev.BadRequestErrorBody>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace BadRequestErrorBody {
    type Raw =
        | BadRequestErrorBody.BadRequest
        | BadRequestErrorBody.MissingRequiredField
        | BadRequestErrorBody.ParseError;

    interface BadRequest extends _Base {
        type: "bad_request";
    }

    interface MissingRequiredField extends _Base, serializers.MissingRequiredFieldBody.Raw {
        type: "missing_required_field";
    }

    interface ParseError extends _Base, serializers.ParseErrorBody.Raw {
        type: "parse_error";
    }

    interface _Base {
        message?: string | null;
    }
}
