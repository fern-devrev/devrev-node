/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../..";
import { DevRev } from "@fern-api/devrev";

const _Base = core.serialization.object({
    message: core.serialization.string().optional(),
});
export const NotFoundErrorBody: core.serialization.Schema<serializers.NotFoundErrorBody.Raw, DevRev.NotFoundErrorBody> =
    core.serialization
        .union("type", {
            not_found: core.serialization.object({}).extend(_Base),
        })
        .transform<DevRev.NotFoundErrorBody>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace NotFoundErrorBody {
    type Raw = NotFoundErrorBody.NotFound;

    interface NotFound extends _Base {
        type: "not_found";
    }

    interface _Base {
        message?: string | null;
    }
}
