/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../..";
import { DevRev } from "@fern-api/devrev";

const _Base = core.serialization.object({
    message: core.serialization.string().optional(),
    referenceId: core.serialization.property("reference_id", core.serialization.number().optional()),
});
export const InternalServerErrorErrorBody: core.serialization.Schema<
    serializers.InternalServerErrorErrorBody.Raw,
    DevRev.InternalServerErrorErrorBody
> = core.serialization
    .union("type", {
        internal_error: core.serialization.object({}).extend(_Base),
    })
    .transform<DevRev.InternalServerErrorErrorBody>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace InternalServerErrorErrorBody {
    type Raw = InternalServerErrorErrorBody.InternalError;

    interface InternalError extends _Base {
        type: "internal_error";
    }

    interface _Base {
        message?: string | null;
        reference_id?: number | null;
    }
}
