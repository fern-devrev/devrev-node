/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../..";
import { DevRev } from "@fern-api/devrev";

const _Base = core.serialization.object({
    message: core.serialization.string().optional(),
});
export const ServiceUnavailableErrorBody: core.serialization.Schema<
    serializers.ServiceUnavailableErrorBody.Raw,
    DevRev.ServiceUnavailableErrorBody
> = core.serialization
    .union("type", {
        service_unavailable: core.serialization.object({}).extend(_Base),
    })
    .transform<DevRev.ServiceUnavailableErrorBody>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ServiceUnavailableErrorBody {
    type Raw = ServiceUnavailableErrorBody.ServiceUnavailable;

    interface ServiceUnavailable extends _Base {
        type: "service_unavailable";
    }

    interface _Base {
        message?: string | null;
    }
}
