/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRev from "../../api";
import * as core from "../../core";

export const WorksUpdateRequest: core.serialization.Schema<
    serializers.WorksUpdateRequest.Raw,
    DevRev.WorksUpdateRequest
> = core.serialization
    .union("type", {
        issue: core.serialization.lazyObject(async () => (await import("..")).WorksUpdateRequestIssue),
        none: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).Empty),
        }),
        ticket: core.serialization.lazyObject(async () => (await import("..")).WorksUpdateRequestTicket),
    })
    .transform<DevRev.WorksUpdateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorksUpdateRequest {
    type Raw = WorksUpdateRequest.Issue | WorksUpdateRequest.None | WorksUpdateRequest.Ticket;

    interface Issue extends serializers.WorksUpdateRequestIssue.Raw {
        type: "issue";
    }

    interface None {
        type: "none";
        value: serializers.Empty.Raw;
    }

    interface Ticket extends serializers.WorksUpdateRequestTicket.Raw {
        type: "ticket";
    }
}
