/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRev from "../../api";
import * as core from "../../core";

export const PartsCreateRequest: core.serialization.Schema<
    serializers.PartsCreateRequest.Raw,
    DevRev.PartsCreateRequest
> = core.serialization
    .union("type", {
        capability: core.serialization.lazyObject(async () => (await import("..")).PartsCreateRequestCapability),
        enhancement: core.serialization.lazyObject(async () => (await import("..")).PartsCreateRequestEnhancement),
        feature: core.serialization.lazyObject(async () => (await import("..")).PartsCreateRequestFeature),
        product: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).PartsCreateRequestProduct),
        }),
    })
    .transform<DevRev.PartsCreateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace PartsCreateRequest {
    type Raw =
        | PartsCreateRequest.Capability
        | PartsCreateRequest.Enhancement
        | PartsCreateRequest.Feature
        | PartsCreateRequest.Product;

    interface Capability extends serializers.PartsCreateRequestCapability.Raw {
        type: "capability";
    }

    interface Enhancement extends serializers.PartsCreateRequestEnhancement.Raw {
        type: "enhancement";
    }

    interface Feature extends serializers.PartsCreateRequestFeature.Raw {
        type: "feature";
    }

    interface Product {
        type: "product";
        value: serializers.PartsCreateRequestProduct.Raw;
    }
}
