/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "..";
import * as DevRev from "../../api";

const _Base = core.serialization.object({
    type: core.serialization.lazy(async () => (await import("..")).PartType),
});
export const Part: core.serialization.Schema<serializers.Part.Raw, DevRev.Part> = core.serialization
    .union("type", {
        capability: core.serialization.lazyObject(async () => (await import("..")).PartBase).extend(_Base),
        enhancement: core.serialization.lazyObject(async () => (await import("..")).Enhancement).extend(_Base),
        feature: core.serialization.lazyObject(async () => (await import("..")).PartBase).extend(_Base),
        product: core.serialization.lazyObject(async () => (await import("..")).PartBase).extend(_Base),
    })
    .transform<DevRev.Part>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Part {
    type Raw = Part.Capability | Part.Enhancement | Part.Feature | Part.Product;

    interface Capability extends _Base, serializers.PartBase.Raw {
        type: "capability";
    }

    interface Enhancement extends _Base, serializers.Enhancement.Raw {
        type: "enhancement";
    }

    interface Feature extends _Base, serializers.PartBase.Raw {
        type: "feature";
    }

    interface Product extends _Base, serializers.PartBase.Raw {
        type: "product";
    }

    interface _Base {
        type: serializers.PartType.Raw;
    }
}
