/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "..";
import * as DevRev from "../../api";

const _Base = core.serialization.object({
    type: core.serialization.lazy(async () => (await import("..")).WorkType),
});
export const Work: core.serialization.Schema<serializers.Work.Raw, DevRev.Work> = core.serialization
    .union("type", {
        issue: core.serialization.lazyObject(async () => (await import("..")).Issue).extend(_Base),
        ticket: core.serialization.lazyObject(async () => (await import("..")).Ticket).extend(_Base),
    })
    .transform<DevRev.Work>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Work {
    type Raw = Work.Issue | Work.Ticket;

    interface Issue extends _Base, serializers.Issue.Raw {
        type: "issue";
    }

    interface Ticket extends _Base, serializers.Ticket.Raw {
        type: "ticket";
    }

    interface _Base {
        type: serializers.WorkType.Raw;
    }
}
