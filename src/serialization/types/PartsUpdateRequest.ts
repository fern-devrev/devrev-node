/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRev from "../../api";
import * as core from "../../core";

export const PartsUpdateRequest: core.serialization.Schema<
    serializers.PartsUpdateRequest.Raw,
    DevRev.PartsUpdateRequest
> = core.serialization
    .union("type", {
        capability: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).PartsUpdateRequestCapability),
        }),
        enhancement: core.serialization.lazyObject(async () => (await import("..")).PartsUpdateRequestEnhancement),
        feature: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).PartsUpdateRequestFeature),
        }),
        none: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).Empty),
        }),
        product: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).PartsUpdateRequestProduct),
        }),
    })
    .transform<DevRev.PartsUpdateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace PartsUpdateRequest {
    type Raw =
        | PartsUpdateRequest.Capability
        | PartsUpdateRequest.Enhancement
        | PartsUpdateRequest.Feature
        | PartsUpdateRequest.None
        | PartsUpdateRequest.Product;

    interface Capability {
        type: "capability";
        value: serializers.PartsUpdateRequestCapability.Raw;
    }

    interface Enhancement extends serializers.PartsUpdateRequestEnhancement.Raw {
        type: "enhancement";
    }

    interface Feature {
        type: "feature";
        value: serializers.PartsUpdateRequestFeature.Raw;
    }

    interface None {
        type: "none";
        value: serializers.Empty.Raw;
    }

    interface Product {
        type: "product";
        value: serializers.PartsUpdateRequestProduct.Raw;
    }
}
